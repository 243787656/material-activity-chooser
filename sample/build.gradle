apply plugin: 'com.android.application'
apply plugin: 'android-apt'
apply from: '../sample/code_coverage.gradle'

android {
    compileSdkVersion project.androidCompileSdkVersion
    buildToolsVersion("$androidBuildToolsVersion")

    defaultConfig {
        applicationId "com.github.zawadz88.sample"
        minSdkVersion project.androidMinSdkVersion
        targetSdkVersion project.androidTargetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.github.zawadz88.sample.test.CucumberAndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
            buildConfigField "String", "CUCUMBER_TAGS", "\"${getCucumberTags()}\""
        }
    }

    adbOptions {
        //add all permissions on install so that there's WRITE_STORAGE permission needed for storing Cucumber reports
        installOptions getInstallOptionsFromProperties()
    }

}

dependencies {

    debugCompile project(path: ':material-activity-chooser', configuration: 'debug')
    releaseCompile project(path: ':material-activity-chooser', configuration: 'release')

    compile ("com.jakewharton:butterknife:$butterknifeVersion")
    apt ("com.jakewharton:butterknife-compiler:$butterknifeVersion")

    androidTestCompile("com.android.support.test:runner:$runnerVersion")
    androidTestCompile("com.android.support.test:rules:$rulesVersion")
    androidTestCompile("com.android.support:support-annotations:$androidSupportLibraryVersion")
    androidTestCompile ("com.android.support.test.espresso:espresso-core:$espressoVersion")
    androidTestCompile ("com.android.support.test.espresso:espresso-intents:$espressoVersion")

    androidTestCompile ("com.android.support.test.espresso:espresso-contrib:$espressoVersion")
    androidTestCompile("com.android.support:support-v4:$androidSupportLibraryVersion") {
        force = true
    }
    androidTestCompile("com.android.support:appcompat-v7:$androidSupportLibraryVersion") {
        force = true
    }
    androidTestCompile("com.android.support:recyclerview-v7:$androidSupportLibraryVersion") {
        force = true
    }
    androidTestCompile("com.android.support:design:$androidSupportLibraryVersion") {
        force = true
    }

    androidTestCompile ("info.cukes:cucumber-android:$cucumberVersion") {
        exclude group: 'com.google.guava', module: 'guava'
    }
    androidTestCompile ("info.cukes:cucumber-picocontainer:$cucumberVersion")

    androidTestCompile ("com.jayway.awaitility:awaitility:$awaitilityVersion") {
        exclude group: 'org.hamcrest'
        exclude group: 'org.objenesis'
        exclude group: 'cglib'
    }

    androidTestCompile ("de.jodamob.android:SuperReflect:$superReflectVersion")
}

/**
 * Reads Cucumber tags from project properties, e.g. from:
 * ./gradlew connectedDebugAndroidTest -Ptags="@pdf-reader-apps-installed"
 * See: https://github.com/cucumber/cucumber/wiki/Tags#logically-anding-and-oring-tags
 * See: cucumber.runtime.android.Arguments#getCucumberOptionsString(bundle)
 */
def getCucumberTags() {
    project.hasProperty("tags") ? project.getProperties().get("tags") : ""
}

private String[] getInstallOptionsFromProperties() {
    (project.hasProperty("install_options") ? project.getProperties().get("install_options").split(',') : ['-g', '-r']) as String []
}